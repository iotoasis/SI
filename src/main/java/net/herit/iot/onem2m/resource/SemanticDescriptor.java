//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.10.07 at 09:56:03 AM KST 
//


package net.herit.iot.onem2m.resource;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlList;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;

import net.herit.iot.message.onem2m.OneM2mRequest.OPERATION;
import net.herit.iot.message.onem2m.OneM2mResponse.RESPONSE_STATUS;
import net.herit.iot.onem2m.core.util.OneM2MException;
import net.herit.iot.onem2m.incse.controller.RestSemanticController;

import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException;
import com.sun.org.apache.xml.internal.security.utils.Base64;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.onem2m.org/xml/protocols}announceableResource">
 *       &lt;sequence>
 *         &lt;element name="creator" type="{http://www.onem2m.org/xml/protocols}ID" minOccurs="0"/>
 *         &lt;element name="descriptorRepresentation" type="{http://www.onem2m.org/xml/protocols}descriptorRepresentation" minOccurs="0"/>
 *         &lt;element name="semanticOpExec" type="{http://www.onem2m.org/xml/protocols}sparql" minOccurs="0"/>
 *         &lt;element name="descriptor" type="{http://www.w3.org/2001/XMLSchema}base64Binary"/>
 *         &lt;element name="ontologyRef" type="{http://www.w3.org/2001/XMLSchema}anyURI" minOccurs="0"/>
 *         &lt;element name="relatedSemantics" type="{http://www.onem2m.org/xml/protocols}listOfURIs" minOccurs="0"/>
 *         &lt;choice minOccurs="0">
 *           &lt;element name="childResource" type="{http://www.onem2m.org/xml/protocols}childResourceRef" maxOccurs="unbounded"/>
 *           &lt;element ref="{http://www.onem2m.org/xml/protocols}subscription" maxOccurs="unbounded"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "creator",
    "descriptorRepresentation",
    "semanticOpExec",
    "descriptor",
    "ontologyRef",
    "relatedSemantics",
    "childResource",
    "subscription"
})

@XmlRootElement(name = Naming.SEMANTICDESCRIPTOR_SN)
public class SemanticDescriptor
    extends AnnounceableResource
{
	
	public final static String SCHEMA_LOCATION = "CDT-semanticDescriptor-v2_7_0.xsd";

	@XmlElement(name = Naming.CREATOR_SN)
    protected String creator;
	@XmlElement(name = Naming.DESCRIPTORREPRESENTATION_SN)
    protected String descriptorRepresentation;
	@XmlElement(name = Naming.SEMANTICOPEXEC_SN)
	//@XmlTransient						
    protected String semanticOpExec;		// Never returned in the response in CDT-2.7.0
	
    //@XmlElement(required = true)
    @XmlElement(name = Naming.DESCRIPTOR_SN, required = true)
    //protected byte[] descriptor;
    protected String descriptor;
    @XmlElement(name = Naming.ONTOLOGYREF_SN)
    @XmlSchemaType(name = "anyURI")
    protected String ontologyRef;
    @XmlList
    @XmlElement(name = Naming.RELATEDSEMANTICS_SN)
    protected List<String> relatedSemantics;
    @XmlElement(name = Naming.CHILDRESOURCE_SN)
    protected List<ChildResourceRef> childResource;
    @XmlElement(name = Naming.SUBSCRIPTION_SN, namespace = "http://www.onem2m.org/xml/protocols")
    //@XmlElement(namespace = "http://www.onem2m.org/xml/protocols")
    protected List<Subscription> subscription;

    /**
     * Gets the value of the creator property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCreator() {
        return creator;
    }

    /**
     * Sets the value of the creator property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCreator(String value) {
        this.creator = value;
    }

    /**
     * Gets the value of the descriptorRepresentation property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescriptorRepresentation() {
        return descriptorRepresentation;
    }

    /**
     * Sets the value of the descriptorRepresentation property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescriptorRepresentation(String value) {
        this.descriptorRepresentation = value;
    }

    /**
     * Gets the value of the semanticOpExec property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSemanticOpExec() {
        return semanticOpExec;
    }

    /**
     * Sets the value of the semanticOpExec property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSemanticOpExec(String value) {
        this.semanticOpExec = value;
    }

    /**
     * Gets the value of the descriptor property.
     * 
     * @return
     *     possible object is
     *     byte[]
     *
    public byte[] getDescriptor() {
        return descriptor;
    }

    **
     * Sets the value of the descriptor property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     *
    public void setDescriptor(byte[] value) {
        this.descriptor = value;
    } */
    
    public String getDescriptor() {
        return descriptor;
    }
    
    public void setDescriptor(String value) {
        this.descriptor = value;
    }
    
    /**
     * Gets the value of the ontologyRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOntologyRef() {
        return ontologyRef;
    }

    /**
     * Sets the value of the ontologyRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOntologyRef(String value) {
        this.ontologyRef = value;
    }

    /**
     * Gets the value of the relatedSemantics property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the relatedSemantics property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRelatedSemantics().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getRelatedSemantics() {
        //if (relatedSemantics == null) {
        //    relatedSemantics = new ArrayList<String>();
        //}
        return this.relatedSemantics;
    }
    
    public void addRelatedSemantics(String value) {
    	if (relatedSemantics == null) {
    		relatedSemantics = new ArrayList<String>();
    	}
    	this.relatedSemantics.add(value);
    }

    /**
     * Gets the value of the childResource property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the childResource property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getChildResource().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link ChildResourceRef }
     * 
     * 
     */
    public List<ChildResourceRef> getChildResource() {
      //  if (childResource == null) {
      //      childResource = new ArrayList<ChildResourceRef>();
      //  }
        return this.childResource;
    }
    
    public void addChildResource(ChildResourceRef value) {
    	if (childResource == null) {
    		childResource = new ArrayList<ChildResourceRef>();
    	}
    	this.childResource.add(value);
    }

    /**
     * Gets the value of the subscription property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the subscription property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSubscription().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Subscription }
     * 
     * 
     */
    public List<Subscription> getSubscription() {
      //  if (subscription == null) {
      //      subscription = new ArrayList<Subscription>();
      //  }
        return this.subscription;
    }
    
    public void addSubscription(Subscription value) {
    	if (subscription == null) {
    		subscription = new ArrayList<Subscription>();
    	}
    	this.subscription.add(value);
    }
    
 // added in CDT-2.7.0
    @Override
	public void validate(OPERATION operation) throws OneM2MException {
				
		if (operation.equals(OPERATION.CREATE)) {	// CREATE 요청에 대한 데이터 유효성 체크
			if (this.descriptorRepresentation == null) {				
				throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "descriptorRepresentation is M on CREATE");				
			}
			if (this.semanticOpExec != null) {				
				throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "semanticOpExec is NP on CREATE");				
			}
			if (this.descriptor == null) {				
				throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "descriptor is M on CREATE");				
			}
			// SPARQL Validation check routine, 2016-11-15
		/*
		 *   blocked in case of test, 2016-11-22
		 * 	try {
				boolean isValidate = RestSemanticController.getInstance().validate(new String(Base64.decode(this.descriptor), "UTF-8"));
				if(!isValidate) {
					throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "descriptor is invalid on CREATE");
				}
			} catch(Exception e) {
				throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "descriptor is invalid on CREATE");
			} */
			
		} else if (operation.equals(OPERATION.UPDATE)) {	// UPDATE 요청에 대한 데이터 유효성 체크
			if (this.creator != null) {				
				throw new OneM2MException(RESPONSE_STATUS.INVALID_ARGUMENTS, "creator is NP on UPDATE");				
			}
			
		}
		
		super.validate(operation);
		
	}

}
